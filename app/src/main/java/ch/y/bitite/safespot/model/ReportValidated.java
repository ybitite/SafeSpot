package ch.y.bitite.safespot.model;

import androidx.room.Entity;
import androidx.room.Ignore;
import androidx.room.PrimaryKey;

import com.google.gson.annotations.SerializedName;

import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Locale;
import java.util.Objects;

/**
 * Represents a validated report entity for storage in a Room database.
 * This class is annotated with Room's {@link Entity} to define a database table named "reports_validated".
 * It includes fields for location, timestamps, description, media, and validation information.
 */
@Entity(tableName = "reports_validated")
public class ReportValidated {
    /**
     * The primary key for the report, auto-generated by Room.
     */
    @PrimaryKey(autoGenerate = true)
    private int id;

    /**
     * The longitude of the report location.
     */
    private double longitude;
    /**
     * The latitude of the report location.
     */
    private double latitude;
    /**
     * The date and time when the report was initially created, as a string.
     * This field is serialized to JSON with the key "date_Time".
     */
    @SerializedName("date_Time")
    private final String dateTimeString;
    /**
     * A textual description of the report.
     */
    private String description;
    /**
     * The URL or path to an image associated with the report.
     */
    private String image;
    /**
     * The URL or path to a video associated with the report.
     */
    private final String video;
    /**
     * A comment associated with the report.
     */
    private final String comment;
    /**
     * The date and time when the report was validated, as a string.
     * This field is serialized to JSON with the key "date_Time_Validation".
     */
    @SerializedName("date_Time_Validation")
    private final String dateTimeValidationString;

    /**
     * Constructs a new ReportValidated object.
     *
     * @param longitude              The longitude of the report location.
     * @param latitude               The latitude of the report location.
     * @param dateTimeString         The date and time when the report was created, as a string.
     * @param description            A description of the report.
     * @param image                  The URL or path to an image associated with the report.
     * @param video                  The URL or path to a video associated with the report.
     * @param comment                A comment associated with the report.
     * @param dateTimeValidationString The date and time when the report was validated, as a string.
     */
    public ReportValidated(double longitude, double latitude, String dateTimeString, String description, String image, String video, String comment, String dateTimeValidationString) {
        this.longitude = longitude;
        this.latitude = latitude;
        this.dateTimeString = dateTimeString;
        this.description = description;
        this.image = image;
        this.video = video;
        this.comment = comment;
        this.dateTimeValidationString = dateTimeValidationString;
        parseDateTime(dateTimeString);
        parseDateTime(dateTimeValidationString);
    }

    /**
     * Parses a date and time string into a ZonedDateTime object.
     * This method is marked with {@link Ignore} because it's not a Room database field.
     *
     * @param dateTimeString The date and time string to parse.
     */
    @Ignore
    private void parseDateTime(String dateTimeString) {
        if (dateTimeString == null) {
            return;
        }
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").withLocale(Locale.getDefault()).withZone(ZoneId.of("UTC"));
            ZonedDateTime.parse(dateTimeString, formatter).toInstant();
        } catch (DateTimeParseException ignored) {
            // Ignore parsing errors.
        }
    }

    /**
     * Gets the ID of the report.
     *
     * @return The report ID.
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the ID of the report.
     *
     * @param id The report ID.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the longitude of the report location.
     *
     * @return The longitude.
     */
    public double getLongitude() {
        return longitude;
    }

    /**
     * Sets the longitude of the report location.
     *
     * @param longitude The longitude.
     */
    public void setLongitude(double longitude) {
        this.longitude = longitude;
    }

    /**
     * Gets the latitude of the report location.
     *
     * @return The latitude.
     */
    public double getLatitude() {
        return latitude;
    }

    /**
     * Sets the latitude of the report location.
     *
     * @param latitude The latitude.
     */
    public void setLatitude(double latitude) {
        this.latitude = latitude;
    }

    /**
     * Gets the description of the report.
     *
     * @return The description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description of the report.
     *
     * @param description The description.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Gets the URL or path to the image associated with the report.
     *
     * @return The image URL or path.
     */
    public String getImage() {
        return image;
    }

    /**
     * Sets the URL or path to the image associated with the report.
     *
     * @param image The image URL or path.
     */
    public void setImage(String image) {
        this.image = image;
    }

    /**
     * Gets the URL or path to the video associated with the report.
     *
     * @return The video URL or path.
     */
    public String getVideo() {
        return video;
    }

    /**
     * Gets the comment associated with the report.
     *
     * @return The comment.
     */
    public String getComment() {
        return comment;
    }

    /**
     * Gets the date and time when the report was created, as a string.
     *
     * @return The date and time string.
     */
    public String getDateTimeString() {
        return dateTimeString;
    }

    /**
     * Gets the date and time when the report was validated, as a string.
     *
     * @return The date and time string.
     */
    public String getDateTimeValidationString() {
        return dateTimeValidationString;
    }

    /**
     * Checks if this ReportValidated object is equal to another object.
     *
     * @param o The object to compare to.
     * @return True if the objects are equal, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ReportValidated that = (ReportValidated) o;
        return id == that.id && Double.compare(that.longitude, longitude) == 0 && Double.compare(that.latitude, latitude) == 0 && Objects.equals(description, that.description) && Objects.equals(dateTimeString, that.dateTimeString) && Objects.equals(image, that.image) && Objects.equals(video, that.video);
    }

    /**
     * Returns a hash code value for this ReportValidated object.
     *
     * @return A hash code value for this object.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, longitude, latitude, description, dateTimeString, image, video);
    }
}